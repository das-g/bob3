
Template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081c  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000349  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  0000177a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	60 c0       	rjmp	.+192    	; 0x104 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
#include <util/delay.h>

int main(void)
{
	// Datenrichtungsregister initialiseren
	DDRB |= (1<<EYE_R) | (1<<EYE_L);
  46:	84 b1       	in	r24, 0x04	; 4
  48:	86 60       	ori	r24, 0x06	; 6
  4a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<LED_R) | (1<<LED_G) | (1<<LED_B);
  4c:	8a b1       	in	r24, 0x0a	; 10
  4e:	88 66       	ori	r24, 0x68	; 104
  50:	8a b9       	out	0x0a, r24	; 10
  
	// Alles ausschalten
	PORTB &= ~((1<<EYE_L) | (1<<EYE_R));
  52:	85 b1       	in	r24, 0x05	; 5
  54:	89 7f       	andi	r24, 0xF9	; 249
  56:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~((1<<LED_R) | (1<<LED_G) | (1<<LED_B));
  58:	8b b1       	in	r24, 0x0b	; 11
  5a:	87 79       	andi	r24, 0x97	; 151
  5c:	8b b9       	out	0x0b, r24	; 11
	while (1)
	{	
		// Auge in Unterschiedlichen Farben leuchten lassen
		  
		// Linkes Auge aktivieren
		PORTB |= (1<<EYE_R);
  5e:	2a 9a       	sbi	0x05, 2	; 5
		PORTB &= ~(1<<EYE_L);
  60:	29 98       	cbi	0x05, 1	; 5
		  
		// Gruene LED und Blaue LED ausschalten
		PORTD |= (1<<LED_G) | (1<<LED_B);
  62:	8b b1       	in	r24, 0x0b	; 11
  64:	88 62       	ori	r24, 0x28	; 40
  66:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<LED_R);
  68:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6a:	2f e7       	ldi	r18, 0x7F	; 127
  6c:	8a e1       	ldi	r24, 0x1A	; 26
  6e:	96 e0       	ldi	r25, 0x06	; 6
  70:	21 50       	subi	r18, 0x01	; 1
  72:	80 40       	sbci	r24, 0x00	; 0
  74:	90 40       	sbci	r25, 0x00	; 0
  76:	e1 f7       	brne	.-8      	; 0x70 <main+0x2a>
  78:	00 c0       	rjmp	.+0      	; 0x7a <main+0x34>
  7a:	00 00       	nop
		  
		// Wartezeit
		_delay_ms(WAIT);
		  
		// Rote LED und Blaue LED ausschalten
		PORTD |= (1<<LED_R) | (1<<LED_B);
  7c:	8b b1       	in	r24, 0x0b	; 11
  7e:	88 64       	ori	r24, 0x48	; 72
  80:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<LED_G);
  82:	5d 98       	cbi	0x0b, 5	; 11
  84:	2f e7       	ldi	r18, 0x7F	; 127
  86:	8a e1       	ldi	r24, 0x1A	; 26
  88:	96 e0       	ldi	r25, 0x06	; 6
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x44>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x4e>
  94:	00 00       	nop
		  
		// Wartezeit
		_delay_ms(WAIT);
		  
		// Rote LED und Gruene LED ausschalten
		PORTD |= (1<<LED_R) | (1<<LED_G);
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	80 66       	ori	r24, 0x60	; 96
  9a:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<LED_B);
  9c:	5b 98       	cbi	0x0b, 3	; 11
  9e:	2f e7       	ldi	r18, 0x7F	; 127
  a0:	8a e1       	ldi	r24, 0x1A	; 26
  a2:	96 e0       	ldi	r25, 0x06	; 6
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x5e>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x68>
  ae:	00 00       	nop
		  
		// Wartezeit
		_delay_ms(WAIT);
		  
		// Linkes Auge aktivieren
		PORTB |= (1<<EYE_L);
  b0:	29 9a       	sbi	0x05, 1	; 5
		PORTB &= ~(1<<EYE_R);
  b2:	2a 98       	cbi	0x05, 2	; 5
		  
		// Gruene LED und Blaue LED ausschalten
		PORTD |= (1<<LED_G) | (1<<LED_B);
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	88 62       	ori	r24, 0x28	; 40
  b8:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<LED_R);
  ba:	5e 98       	cbi	0x0b, 6	; 11
  bc:	2f e7       	ldi	r18, 0x7F	; 127
  be:	8a e1       	ldi	r24, 0x1A	; 26
  c0:	96 e0       	ldi	r25, 0x06	; 6
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x7c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x86>
  cc:	00 00       	nop
		  
		// Wartezeit
		_delay_ms(WAIT);
		  
		// Rote LED und Blaue LED ausschalten
		PORTD |= (1<<LED_R) | (1<<LED_B);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	88 64       	ori	r24, 0x48	; 72
  d2:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<LED_G);
  d4:	5d 98       	cbi	0x0b, 5	; 11
  d6:	2f e7       	ldi	r18, 0x7F	; 127
  d8:	8a e1       	ldi	r24, 0x1A	; 26
  da:	96 e0       	ldi	r25, 0x06	; 6
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x96>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0xa0>
  e6:	00 00       	nop
		  
		// Wartezeit
		_delay_ms(WAIT);
		  
		// Rote LED und Gruene LED ausschalten
		PORTD |= (1<<LED_R) | (1<<LED_G);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	80 66       	ori	r24, 0x60	; 96
  ec:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<LED_B);
  ee:	5b 98       	cbi	0x0b, 3	; 11
  f0:	2f e7       	ldi	r18, 0x7F	; 127
  f2:	8a e1       	ldi	r24, 0x1A	; 26
  f4:	96 e0       	ldi	r25, 0x06	; 6
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0xb0>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0xba>
 100:	00 00       	nop
 102:	ad cf       	rjmp	.-166    	; 0x5e <main+0x18>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
